{ -*- buffer-read-only: t -*- }

{ Unit automatically generated by CastleInternalJoystickDatabaseConverter tool,
  to store converted version of https://github.com/gabomdq/SDL_GameControllerDB -
  A community sourced database of game controller mappings
  @exclude (Exclude this unit from PasDoc documentation.) }
unit CastleInternalJoystickDatabaseGeneric;

interface

uses Generics.Collections, CastleInternalJoystickLayout;

type
  TJoystickDatabase = specialize TObjectDictionary<String, TJoystickLayout>;

var
  { Database of joysticks by name/GUID,
    A database corresponding to the current OS will be loaded
    As different OS report different GUIDs and names for the same joystick
    Note that the database contains a large number of joysticks
    with identical "name" but different GUID. }
  JoystickLayoutsByName, JoystickLayoutsByGuid: TJoystickDatabase;

{ Initialize (read) joysticks layout database.
  Will also free previously loaded database. }
procedure InitJoysticksDatabase;
{ Free joysticks layout database. }
procedure FreeJoysticksDatabase;
implementation

uses SysUtils;

procedure FreeJoysticksDatabase;
begin
  FreeAndNil(JoystickLayoutsByName);
  FreeAndNil(JoystickLayoutsByGuid);
end;

procedure InitJoysticksDatabase;
var
  JoyData: TJoystickLayout;
begin
  FreeJoysticksDatabase;
  JoystickLayoutsByName := TJoystickDatabase.Create;
  JoystickLayoutsByGuid := TJoystickDatabase.Create([doOwnsValues]);

  JoyData := TJoystickLayout.Create;
  JoyData.JoystickName := 'Default';
  JoyData.Guid := 'minimalistic';
  JoyData.AxesPlus.Add(0, axisLeftX);
  JoyData.AxesPlus.Add(1, axisLeftY);
  JoyData.AxesMinus.Add(0, axisLeftX);
  JoyData.AxesMinus.Add(1, axisLeftY);
  JoyData.CacheJoystickEvents;
  JoystickLayoutsByName.AddOrSetValue(JoyData.JoystickName, JoyData);
  JoystickLayoutsByGuid.Add(JoyData.Guid, JoyData);
end;

finalization
  FreeJoysticksDatabase;
end.